/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view.main;

import controller.ControllerOrder;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Customer;
import model.Order;
import view.Customers.CustomersManagmentView;

/**
 *
 * @author joanp
 *
 */
public class MainView extends javax.swing.JFrame {

    private final ControllerOrder controller;

    /**
     * Creates new form MainView
     */
    public MainView() {
        initComponents();
        controller = new ControllerOrder();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setLocationRelativeTo(null);
        setTitle("Inicio");
        fillTable();
        setCbxCustomers();
        setCbxSearchCustomer();
        hideLabel();
    }

    private void fillTable() {
        DefaultTableModel model = new DefaultTableModel();

        ArrayList<Order> orders = controller.listOrders();
        model.setColumnIdentifiers(new Object[]{
            "PedidoID", "FechaPedido", "Total", "Cliente"
        });

        tableOrders.setModel(model);

        for (Order order : orders) {
            model.addRow(new Object[]{
                order.getOrderID(),
                order.getDateOrder(),
                order.getTotal(),
                order.getCustomer().getName()
            });
        }
    }

    /**
     * Reestablece los valores de búsqueda y limpia los campos de texto.
     */
    private void cleanFields() {
        txtID.setText("");
        txtDate.setText("");
        txtTotal.setText("");
        cbxCustomer.setSelectedIndex(0);
        txtFilter.setText("");
    }

    private void cleanTable() {
        DefaultTableModel model = (DefaultTableModel) tableOrders.getModel();
        model.setRowCount(0);
    }

    /**
     * Método para verificar si existen campos vacíos.
     *
     * @return true si hay campos sin llenar, false en caso contrario.
     */
    private boolean hasEmptyFields() {
        return (txtID.getText().isEmpty() || txtDate.getText().isEmpty() || txtTotal.getText().isEmpty()
                || cbxCustomer.getSelectedIndex() == 0);
    }

    private void setCbxCustomers() {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        cbxCustomer.setModel(model);
        cbxSearchCustomers.setModel(model);

        ArrayList<Customer> customers = controller.getAllCustomers();
        model.addElement("Seleccione un Cliente"); // Agrega la opción predeterminada

        for (Customer customer : customers) {
            model.addElement(customer.getName()); // Agrega los nombres de los clientes al ComboBoxModel
        }
    }

    private void setCbxSearchCustomer() {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        cbxSearchCustomers.setModel(model);

        ArrayList<Customer> customers = controller.getAllCustomers();
        model.addElement("Seleccione un cliente"); // Agrega la opción predeterminada

        for (Customer customer : customers) {
            model.addElement(customer.getName()); // Agrega los nombres de los clientes  al ComboBoxModel
        }
    }

    private void hideLabel() {
        lblWarning.setVisible(false);
    }

    private void showLabel() {
        lblWarning.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtTotal = new javax.swing.JTextField();
        btnSearchCustomer = new javax.swing.JButton();
        btnShowAllOrders = new javax.swing.JButton();
        txtID = new javax.swing.JTextField();
        btnClean = new javax.swing.JButton();
        cbxCustomer = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        cbxSearchCustomers = new javax.swing.JComboBox<>();
        btnUpdate = new javax.swing.JButton();
        lblWarning = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        lblCategoriesManagement = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableOrders = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtFilter = new javax.swing.JTextField();
        txtDate = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        txtTotal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTotalKeyTyped(evt);
            }
        });

        btnSearchCustomer.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btnSearchCustomer.setText("Buscar");
        btnSearchCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCustomerActionPerformed(evt);
            }
        });

        btnShowAllOrders.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btnShowAllOrders.setText("Ver todos");
        btnShowAllOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowAllOrdersActionPerformed(evt);
            }
        });

        txtID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIDKeyTyped(evt);
            }
        });

        btnClean.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btnClean.setText("Limpiar");
        btnClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanActionPerformed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btnAdd.setText("Registrar");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        cbxSearchCustomers.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxSearchCustomersItemStateChanged(evt);
            }
        });
        cbxSearchCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxSearchCustomersActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btnUpdate.setText("Editar");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lblWarning.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lblWarning.setForeground(new java.awt.Color(204, 0, 0));
        lblWarning.setText("NO SE ENCUENTRAN ORDENES ");

        btnDelete.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btnDelete.setText("Eliminar");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblCategoriesManagement.setForeground(new java.awt.Color(153, 153, 153));
        lblCategoriesManagement.setText("Gestionar");
        lblCategoriesManagement.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblCategoriesManagement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCategoriesManagementMouseClicked(evt);
            }
        });

        tableOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableOrdersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableOrders);

        jLabel1.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("ID:");

        jLabel2.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("FECHA:");

        jLabel3.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("TOTAL");

        jLabel4.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("CLIENTE:");

        jLabel6.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("ID:");

        try {
            txtDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(txtID)
                    .addComponent(txtTotal)
                    .addComponent(cbxCustomer, 0, 246, Short.MAX_VALUE)
                    .addComponent(txtDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 137, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblWarning, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addGap(18, 18, 18)
                            .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(33, 33, 33)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(cbxSearchCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSearchCustomer)
                                    .addGap(40, 40, 40)
                                    .addComponent(btnShowAllOrders)
                                    .addGap(32, 32, 32)
                                    .addComponent(btnClean))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(lblCategoriesManagement)
                                    .addGap(0, 0, Short.MAX_VALUE))))))
                .addGap(126, 126, 126))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearchCustomer)
                        .addComponent(btnShowAllOrders)
                        .addComponent(btnClean)
                        .addComponent(cbxSearchCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(cbxCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblCategoriesManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblWarning)))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate))
                .addGap(44, 44, 44)
                .addComponent(btnDelete)
                .addContainerGap(72, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtTotalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTotalKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtTotalKeyTyped

    private void btnSearchCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCustomerActionPerformed
        int id = Integer.parseInt(txtFilter.getText().trim());

        if (id == 0) {
            JOptionPane.showMessageDialog(null, "Ingrese el id de la orden que desea buscar");
            return;
        }

        DefaultTableModel model = new DefaultTableModel();

        model.setColumnIdentifiers(new Object[]{
            "PedidoID", "FechaPedido", "Total", "Cliente"
        });

        tableOrders.setModel(model);
        Order order = controller.searchOrder(id);
        if (order != null) {
            model.addRow(new Object[]{
                order.getOrderID(),
                order.getDateOrder(),
                order.getTotal(),
                order.getCustomer().getName()
            });

        } else {
            JOptionPane.showMessageDialog(null, "Orden no encontrado");
            fillTable();
        }
    }//GEN-LAST:event_btnSearchCustomerActionPerformed

    private void btnShowAllOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowAllOrdersActionPerformed
        fillTable();
        cleanFields();
    }//GEN-LAST:event_btnShowAllOrdersActionPerformed

    private void btnCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanActionPerformed
        cleanTable();
        cleanFields();
    }//GEN-LAST:event_btnCleanActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (hasEmptyFields()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar todos los datos");
            return;
        }

        int id = Integer.parseInt(txtID.getText().trim());
        String date = txtDate.getText().trim();
        String total = txtTotal.getText().trim();
        String customer = cbxCustomer.getSelectedItem().toString();

        Customer selectedCustomer = null;

        for (Customer customers : controller.getAllCustomers()) {
            if (customers.getName().equals(customer)) {
                selectedCustomer = customers;
                break;
            }
        }

        try {
            Order order = new Order(id, date, total, selectedCustomer);
            controller.addOrder(order);
            JOptionPane.showMessageDialog(null, "Orden guardada");
            fillTable();
            cleanFields();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error al agregar la orden");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void cbxSearchCustomersItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxSearchCustomersItemStateChanged

        if (cbxSearchCustomers.getSelectedIndex() != 0) {

            String name = cbxSearchCustomers.getSelectedItem().toString().trim();
            int selectedID = 0;
            for (Customer customers : controller.getAllCustomers()) {
                if (customers.getName().equals(name)) {
                    selectedID = customers.getCustomerId();
                    break;
                }
            }

            DefaultTableModel model = new DefaultTableModel();

            model.setColumnIdentifiers(new Object[]{
                "PedidoID", "FechaPedido", "Total", "Cliente"
            });

            tableOrders.setModel(model);
            ArrayList<Order> orders = controller.searchOrderByCustomer(selectedID);

            if (!orders.isEmpty()) {
                hideLabel();
                for (Order order : orders) {
                    model.addRow(new Object[]{
                        order.getOrderID(),
                        order.getDateOrder(),
                        order.getTotal(),
                        order.getCustomer().getName()
                    });
                }
            } else {

                cleanTable();
                showLabel();
            }

        } else {
            fillTable();
            hideLabel();
        }

    }//GEN-LAST:event_cbxSearchCustomersItemStateChanged

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int id = Integer.parseInt(txtID.getText().trim());
        String date = txtDate.getText().trim();
        String total = txtTotal.getText().trim();
        String customer = cbxCustomer.getSelectedItem().toString();

        Customer selectedCustomer = null;

        for (Customer customers : controller.getAllCustomers()) {
            if (customers.getName().equals(customer)) {
                selectedCustomer = customers;
                break;
            }
        }

        Order order = new Order(id, date, total, selectedCustomer);
        boolean success = controller.updatedOrder(order);

        if (success) {
            JOptionPane.showMessageDialog(null, "Editado correctamente la orden de id " + id);
            fillTable();
            cleanFields();
        } else {
            JOptionPane.showMessageDialog(null, "Error al actualizar la orden " + id);
            cleanFields();
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int id = Integer.parseInt(txtID.getText().trim());

        boolean success = controller.deleteOrder(id);

        if (success) {
            fillTable();
            cleanFields();
            JOptionPane.showMessageDialog(null, "Orden eliminado correctamente");
        } else {
            JOptionPane.showMessageDialog(null, "Error al eliminar la orden");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void lblCategoriesManagementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCategoriesManagementMouseClicked
        new CustomersManagmentView().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_lblCategoriesManagementMouseClicked

    private void tableOrdersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOrdersMouseClicked
        int seleccion = tableOrders.getSelectedRow();

        txtID.setText(tableOrders.getValueAt(seleccion, 0).toString());
        txtDate.setText(tableOrders.getValueAt(seleccion, 1).toString());
        txtTotal.setText(tableOrders.getValueAt(seleccion, 2).toString());
        cbxCustomer.setSelectedItem((tableOrders.getValueAt(seleccion, 3)).toString());
        cbxSearchCustomers.setSelectedIndex(0);
    }//GEN-LAST:event_tableOrdersMouseClicked

    private void txtIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIDKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtIDKeyTyped

    private void cbxSearchCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSearchCustomersActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxSearchCustomersActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClean;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearchCustomer;
    private javax.swing.JButton btnShowAllOrders;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbxCustomer;
    private javax.swing.JComboBox<String> cbxSearchCustomers;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCategoriesManagement;
    private javax.swing.JLabel lblWarning;
    private javax.swing.JTable tableOrders;
    private javax.swing.JFormattedTextField txtDate;
    private javax.swing.JTextField txtFilter;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
